package org.eclipse.cdt.common;

/**
 * 

 number of bits = 8192
 modulus = "649176016441447035608870197722021183897437890900166860413454659394340353387249545305231475169385599459772614711194987915454244398265420775828577222340906869773853171949953495260886144399512931392073685486066703602770329995704433395537425075708431489083161803925375879083373154947395463770220525371496641890689873143784593852882447348228854167254348181808683151430833848179921019294808889238612418939451734719211806878237671487637079683061297107252590688523040939842485804432857490545495390123830186750719015147589133156940692526297379885077452837493947955182480387100297345739678313046076297046976020043257482594260744869555987636814389625879670933345619781670639315757422982038019622854316761904829417082685410327934606121333383076694565377815314165141080128313883849257183116458530497633102111594286105528275536430215528232445541345508941052209918541314809154860744591135954552795717831265877659085964824169694534175064735342264037407606902614626184907365734723533270951760212240380466521305788568775947440827595306472792551161855659635158143091141201855569880884371583251420902871926804026132131154548012652087267697950225518044947511837871197834752985420514442429583448444310184377892967712334051182207179907257296157965861476642135938864851014445412270738018803225080285933013114103705217952943802672610040194664233573268438050005540899072588209148399199815440377094377237874664913206349469583500938567698519086474612100942555237766263960572082644313375474835311508508327621279761247284300959606347916927337755356475178405658976107989563713035410198423421172052147234990847112646703729050266412826411646355410936562408802098109416985895441004382818517230984902010003328272968366908629495691154478966265144948159385500968886764063065701751649064963362007768885386084414726341273124359893700004359648144764314667121845259644596105950102522442458438251362824997898734124219113976680522708139062922656282476806159104602715493989014531639515385246819560499871251531723262142900265166245770347331092105096779842866425779530257584684799614091096941762862646086673022350520973453522960232628969821414410717805828358241817854512402363429237593195072094511036291616131772898240759561404350045685541634180926953367845451725503319922817934296197758994760097104213605845730744938597577343325444266280735345136973550178810138251695299909564110409905410982461148641795924068954624008726585896726517185853953643208024865731251800755918300019999115845037156008100832275121003591"
 public  = "65537"

 number of bits = 8192
 modulus = "649176016441447035608870197722021183897437890900166860413454659394340353387249545305231475169385599459772614711194987915454244398265420775828577222340906869773853171949953495260886144399512931392073685486066703602770329995704433395537425075708431489083161803925375879083373154947395463770220525371496641890689873143784593852882447348228854167254348181808683151430833848179921019294808889238612418939451734719211806878237671487637079683061297107252590688523040939842485804432857490545495390123830186750719015147589133156940692526297379885077452837493947955182480387100297345739678313046076297046976020043257482594260744869555987636814389625879670933345619781670639315757422982038019622854316761904829417082685410327934606121333383076694565377815314165141080128313883849257183116458530497633102111594286105528275536430215528232445541345508941052209918541314809154860744591135954552795717831265877659085964824169694534175064735342264037407606902614626184907365734723533270951760212240380466521305788568775947440827595306472792551161855659635158143091141201855569880884371583251420902871926804026132131154548012652087267697950225518044947511837871197834752985420514442429583448444310184377892967712334051182207179907257296157965861476642135938864851014445412270738018803225080285933013114103705217952943802672610040194664233573268438050005540899072588209148399199815440377094377237874664913206349469583500938567698519086474612100942555237766263960572082644313375474835311508508327621279761247284300959606347916927337755356475178405658976107989563713035410198423421172052147234990847112646703729050266412826411646355410936562408802098109416985895441004382818517230984902010003328272968366908629495691154478966265144948159385500968886764063065701751649064963362007768885386084414726341273124359893700004359648144764314667121845259644596105950102522442458438251362824997898734124219113976680522708139062922656282476806159104602715493989014531639515385246819560499871251531723262142900265166245770347331092105096779842866425779530257584684799614091096941762862646086673022350520973453522960232628969821414410717805828358241817854512402363429237593195072094511036291616131772898240759561404350045685541634180926953367845451725503319922817934296197758994760097104213605845730744938597577343325444266280735345136973550178810138251695299909564110409905410982461148641795924068954624008726585896726517185853953643208024865731251800755918300019999115845037156008100832275121003591"
 private = "531805880200625729706410473096111712789502807370617489385805785335968153755201696573649502401604804366941912791471024172679669091567723737929484930848812243838116317433649743710674204197950016945811557232951602652326677705866603905268982063027515293435720141738950214325161938184777570820995766759920529011510412581343474293506764625047083670774546365945108580405246008225637421363500002219244450432904843578513564668489923353651517982577702963122771699733357065142795334977054991110465180050478280456423127168527173671816407530888715248943929199374018917830187634811492193693209168421162766618216405451613710202186106635285744911199642190430257306093651446333113868263492760725349001507584392223423131121888617264845097173232626922525868227171652454309692386421651831773191436233358032209682868719563489839358789689265777800990833021921724021713629043839502478083581116146712971763988265025900480049548796558013948621250217603116890311421019997467851981425020459237594806874014293628736234430400791620658043596013500982823237053537797801125629587518330793625520925891352390287706690693901987502965613704833960438549646269309056148391626341633411192947774253575528101064683767614098583705657117960702196779515004666519922011553335640576462105189247065196430031871213320444009353967009489055582201553300205087885468335174705946933716414554463446827358048146709561263622528763816521871382869136461276517186770608461162142313948810568591472321954192102506944291257414091220134579324513469000323781994847917098498714298827170576297918796142701716966418333684740115543709657522269892013736075499550022081748759001088184761723580007718690587012998029906471448818445897885755692550406059222579366432833344689583073926854395684694575509092505966372654103460705055042580913138018239374400558731659952269619093335413128382530907538507496962889390723383390869619155765886597709384123183741018284617925809412035505877756327728403289483210305250982187929055738544762076678506954182803201842597751655867231600548060283120520313554362040197281854786746522346857222691096194220909958144191661697891991144334790116321763327545604095809466264295512521627908543309314571132997564214174316824164699383931004015970632653720098784134859683605300922580995563583680716697614235163359324514346342968554900468524497336858578980781252058470450763290910735145754553035039856822867117323387931610391587170408907988051381614324577609525779794112286641821951277675374821021460204327767380305634881"

 Plaintext: Yellow and Black Border Collies
 Ciphertext: 188715733956122851428304580888346313381737952788206643304245671617918555308647755260302945396857411179946050455749907759994332372229718964797264044514858778214909597644842988391308668657948988230072963030265401660138166739688749455920057516270111987758453171409056182957962148454604473382218424790286644547876301708745963122375484720224735211337345770714180523306747242192855692732511345832123521943798701723917773035088795810691608713227697141092765543443414565476984286293107021304676358691263067646934510747625101974086811039578847688641765090232646191094012304736042919677661208312847205729700982206842556960597544645946982696899878787876038615402844028539810277511291311762163470815652627682998526673299192241732506460810784037833324880978729978112678750871450354496645055435196288278367194396276586518137924207079175393700762372926363821835782199875544830451058030789320527452153060162248577644789946841984482217149053458505203053090761631654658564269867988815031792987246055984282637840112766738272106813618820216979405322496640417623838763432812625729490482657653548662420453713765315632604597474913844771515708860867955227849021555813301545306763986858894224115760203032849045041252024123811374862637106263304608582750743379352922445617566043890074958083332960157664788784130075741740396845441535541876697429431405843125041761555577254134763379085075926690268946860563675726723903489221400532467083816727139050298896103929492635675806459180090740371660902566789159142082328439057621332626275271743338911456821669184726164508322268979082343313103581871610597775491876035436001973074240585205413587591525218668316489040103419547587490813610297446946745058289486114413867280621188474144484985060020155912981175724259108797859020609821965605298270487628239683170840936083296650942202000732467278009358250387430922288213664576514421185026756670689009459176858210460270482677995891620582371836262491730355643371955382695419290295003652484098228454273319462561157321577588657351944059456493456671316333819599046429675789462388796053873974634627445248921867146129135880058241887337448331928634510809077633439792479945064248694295727272320068346220474119894244749334714017453331099823616741225607113487685280851566279571368715388537626018397877215559971400317587667769233730802715122598398940690490113949352755219277891099336736598252889411440755875840624672489242625438625810277388341341678960464630863964051797799311581629479557420236433332490604277660274864586639
 Plaintext: Yellow and Black Border Collies

 */
import java.math.BigInteger;
import java.security.SecureRandom;

public class RSA {
	private Encryptor encryptor;
	private Decryptor decryptor;

	// generate an N-bit (roughly) public and private key
	RSA(int N/* number of bits */) {
		// modulus
		BigInteger n;
		// public key
		BigInteger e;
		// private key
		BigInteger d;

		SecureRandom random = new SecureRandom();
		BigInteger p = new BigInteger(N / 2, 100, random);
		BigInteger q = new BigInteger(N / 2, 100, random);
		BigInteger phi = (p.subtract(BigInteger.ONE)).multiply(q
				.subtract(BigInteger.ONE));

		n = p.multiply(q);
		// common value in practice = 2^16 + 1
		e = new BigInteger("65537");
		while (phi.gcd(e).compareTo(BigInteger.ONE) > 0) {
			e = e.add(new BigInteger("2"));
		}
		d = e.modInverse(phi);

		encryptor = new Encryptor(N, n, e);
		decryptor = new Decryptor(N, n, d);
	}

	public Encryptor getEncryptor() {
		return encryptor;
	}

	public Decryptor getDecryptor() {
		return decryptor;
	}

	public static class Encryptor {
		// number of bits
		private int N;
		// modulus
		private BigInteger n;
		// public key
		private BigInteger e;

		public Encryptor(int N, BigInteger n, BigInteger e) {
			this.N = N;
			this.n = n;
			this.e = e;
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			sb.append("number of bits = " + N + "\n");
			sb.append("modulus = \"" + n + "\"\n");
			sb.append("public  = \"" + e + "\"\n");
			return sb.toString();
		}

		public BigInteger encrypt(BigInteger message) {
			return message.modPow(e, n);
		}
	}

	public static class Decryptor {
		// number of bits
		private int N;
		// modulus
		private BigInteger n;
		// private key
		private BigInteger d;

		public Decryptor(int N, BigInteger n, BigInteger d) {
			this.N = N;
			this.n = n;
			this.d = d;
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			sb.append("number of bits = " + N + "\n");
			sb.append("modulus = \"" + n + "\"\n");
			sb.append("private = \"" + d + "\"\n");
			return sb.toString();
		}

		public BigInteger decrypt(BigInteger encrypted) {
			return encrypted.modPow(d, n);
		}
	}

	public static void main(String[] args) {
		// Number of bits of the n (the modulus)
		int N = 8192;
		if (args.length >= 1) {
			try {
				N = Integer.parseInt(args[0]);
			} catch (NumberFormatException e) {
				System.out.println("Invalid number of bits");
				System.exit(1);
			}
			if (N % 2 != 0) {
				System.out.println("number of bits must be even");
				System.exit(1);
			}
			if (N < 2048) {
				System.out
						.println("number of bits must be greater or equal to 2048");
				System.exit(1);
			}
		}

		RSA rsa = new RSA(N);
		System.out.println(rsa.getEncryptor());
		System.out.println(rsa.getDecryptor());

		String text1 = "Yellow and Black Border Collies";
		System.out.println("Plaintext: " + text1);
		// ensure that plaintext is always positive
		BigInteger plaintext = new BigInteger(1, text1.getBytes());

		BigInteger ciphertext = rsa.getEncryptor().encrypt(plaintext);
		System.out.println("Ciphertext: " + ciphertext);
		plaintext = rsa.getDecryptor().decrypt(ciphertext);

		String text2 = new String(plaintext.toByteArray());
		System.out.println("Plaintext: " + text2);

	}
}
